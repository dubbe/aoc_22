/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;
import java.util.Arrays;

public class App {
    private final List<String> input;

    public App(List<String> input) {
        this.input = input;
    }

    public Integer getSolutionPart1() {
        int sum = 0;
        for(String line: input) {
            String[] pair = line.split(",");

            List<Integer> pair1 = Arrays.stream(pair[0].split("-"))
                    .map(Integer::parseInt)
                    .toList();
            List<Integer> pair2 = Arrays.stream(pair[1].split("-"))
                    .map(Integer::parseInt)
                    .toList();

            if(pair1.get(0) <= pair2.get(0) && pair1.get(1) >= pair2.get(1)) {
                System.out.println(line);
                sum += 1;
            } else if(pair2.get(0) <= pair1.get(0) && pair2.get(1) >= pair1.get(1)) {
                System.out.println(line);
                sum+=1;
            }
        }
        return sum;
    }

    public Integer getSolutionPart2() {
        int sum = 0;
        for(String line: input) {
            String[] pair = line.split(",");

            List<Integer> pair1 = Arrays.stream(pair[0].split("-"))
                    .map(Integer::parseInt)
                    .toList();
            List<Integer> pair2 = Arrays.stream(pair[1].split("-"))
                    .map(Integer::parseInt)
                    .toList();

            List<Integer> pair1range = getNumbersInRange(pair1.get(0), pair1.get(1)+1);
            List<Integer> pair2range = getNumbersInRange(pair2.get(0), pair2.get(1)+1);


            Set<Integer> result = pair1range.stream()
                    .distinct()
                    .filter(pair2range::contains)
                    .collect(Collectors.toSet());


            if(result.size() > 0) {
                sum +=1;
            }
        }
        return sum;
    }

    public List<Integer> getNumbersInRange(int start, int end) {
        List<Integer> result = new ArrayList<>();
        for (int i = start; i < end; i++) {
            result.add(i);
        }
        return result;
    }

    public static void main(String[] args) throws IOException {
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App(input).getSolutionPart2());
        else
            System.out.println(new App(input).getSolutionPart1());
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
