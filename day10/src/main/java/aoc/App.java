/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.math.BigInteger;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.stream.Collectors;


public class App {

    private static class Monkey {
        public Integer id;
        public Queue<Long> items;
        public String operation;
        public Integer divisible;
        public Integer ifTrue;
        public Integer ifFalse;
        public Integer inspected;
    }

    public App() {
    }


    public Integer getSolutionPart1(List<String> input) {
        Map<Integer, Monkey> monkeys = new HashMap<>();
        Monkey monkey = new Monkey();
        for(String line : input) {

            if(line.equals("")) {
                monkeys.put(monkey.id, monkey);
                monkey = new Monkey();
                continue;
            }
            String[] test = line.trim().split(" ");

            switch(test[0]) {
                case "Monkey": {
                    String id = test[1].replace(":", "");
                    monkey.id = Integer.parseInt(id);
                    monkey.items = new LinkedList<>();
                    monkey.inspected = 0;
                    break;
                }
                case "Starting": {
                    for(String item: test) {
                        item = item.replace(",", "");
                        if(item.matches("[0-9]+")) {
                            monkey.items.add((long) Integer.parseInt(item));
                        }
                    }
                    break;
                }
                case "Operation:": {
                    String[] t = line.split("=");
                    monkey.operation = t[1].trim();
                    break;
                }
                case "Test:": {
                    String[] t = line.split("by");
                    monkey.divisible = Integer.parseInt(t[1].trim());
                    break;
                }
                case "If": {
                    String[] t = line.split("monkey");
                    if(test[1].equals("true:")) {
                        monkey.ifTrue = Integer.parseInt(t[1].trim());
                    } else {
                        monkey.ifFalse = Integer.parseInt(t[1].trim());
                    }
                    break;
                }
                default: {
                    System.out.println("### " + line);
                }
            }

        }
        monkeys.put(monkey.id, monkey);

        for(int i = 0; i<20; i++) {
            for(Monkey m: monkeys.values()) {
                while(m.items.size() > 0) {
                    m.inspected++;
                    Long item = m.items.poll();
                    Long newWorry = calculateWorry(item, m.operation);
                    newWorry = newWorry / 3;
                    if (newWorry % m.divisible == 0) {
                        monkeys.get(m.ifTrue).items.add(newWorry);
                    } else {
                        monkeys.get(m.ifFalse).items.add(newWorry);
                    }
                }
            }


        }
        List<Integer> sums = new ArrayList<>();
        for(Monkey m: monkeys.values()) {
            sums.add(m.inspected);
        }
        Collections.sort(sums,  Collections.reverseOrder());
        return sums.get(0) * sums.get(1);
    }

    public Long calculateWorry(Long old, String operation)  {
        String[] op = operation.split(" ");
        String operand = op[1];
        Long value1 = 0L;
        Long value2 = 0L;
        if(op[0].equals("old")) {
            value1 = old;
        } else {
            value1 = (long) Integer.parseInt(op[0]);
        }
        if(op[2].equals("old")) {
            value2 = old;
        } else {
            value2 = (long) Integer.parseInt(op[2]);
        }
        switch(operand){
            case "+": {
                return value1 + value2;
            }
            case "-": {
                return value1 - value2;
            }
            case "*": {
                return value1 * value2;
            }
            case "/": {
                return value1 / value2;
            }
            default : {
                System.out.println("### " + operation);
                return 0L;
            }
        }
    }

    public long getSolutionPart2(List<String> input) {
        Map<Integer, Monkey> monkeys = new HashMap<>();
        Monkey monkey = new Monkey();
        for(String line : input) {

            if(line.equals("")) {
                monkeys.put(monkey.id, monkey);
                monkey = new Monkey();
                continue;
            }
            String[] test = line.trim().split(" ");

            switch(test[0]) {
                case "Monkey": {
                    String id = test[1].replace(":", "");
                    monkey.id = Integer.parseInt(id);
                    monkey.items = new LinkedList<>();
                    monkey.inspected = 0;
                    break;
                }
                case "Starting": {
                    for(String item: test) {
                        item = item.replace(",", "");
                        if(item.matches("[0-9]+")) {
                            monkey.items.add(Long.valueOf(item));
                        }
                    }
                    break;
                }
                case "Operation:": {
                    String[] t = line.split("=");
                    monkey.operation = t[1].trim();
                    break;
                }
                case "Test:": {
                    String[] t = line.split("by");
                    monkey.divisible = Integer.parseInt(t[1].trim());
                    break;
                }
                case "If": {
                    String[] t = line.split("monkey");
                    if(test[1].equals("true:")) {
                        monkey.ifTrue = Integer.parseInt(t[1].trim());
                    } else {
                        monkey.ifFalse = Integer.parseInt(t[1].trim());
                    }
                    break;
                }
                default: {
                   System.out.println("### " + line);
                }
            }

        }
        monkeys.put(monkey.id, monkey);

        int superModulo = 1;
        for(Monkey m: monkeys.values()) {
            superModulo *= m.divisible;
        }

        for(int i = 0; i<10000; i++) {
            for(Monkey m: monkeys.values()) {

                while(m.items.size() > 0) {
                    m.inspected++;
                    Long item = m.items.poll();
                    Long newWorry = calculateWorry(item, m.operation);
                    newWorry = newWorry % superModulo;
                    if (newWorry % m.divisible == 0) {
                        monkeys.get(m.ifTrue).items.add(newWorry);
                    } else {
                        monkeys.get(m.ifFalse).items.add(newWorry);
                    }
                }
            }

        }
        List<Integer> sums = new ArrayList<>();
        for(Monkey m: monkeys.values()) {
            sums.add(m.inspected);
        }
        Collections.sort(sums,  Collections.reverseOrder());
        return (long) sums.get(0) * sums.get(1);
    }

    public static void main(String[] args) throws IOException {
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App().getSolutionPart2(input));
        else
            System.out.println(new App().getSolutionPart1(input));
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
