/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.stream.Collectors;


public class App {


    public App() {
    }

    public String getSolutionPart1(List<String> input) {
        int sum = 0;
        Map<String, Long> apesWithNumbers = new HashMap<>();
        Map<String, String> apesWithCalculations = new HashMap<>();

        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");

        for(String line : input) {
            String[] split = line.split(": ");
            String ape = split[0];
            String number = split[1];
            if(pattern.matcher(number).matches()) {
                apesWithNumbers.put(ape, Long.parseLong(number));
            } else {
                apesWithCalculations.put(ape, number);
            }
        }

        System.out.println(apesWithCalculations);
        System.out.println(apesWithNumbers);

        while(apesWithCalculations.size() > 0) {
            Map<String, String> newApesWithCalculations = new HashMap<>();
            for(Map.Entry<String, String> entry : apesWithCalculations.entrySet()) {
                String ape = entry.getKey();
                String calculation = entry.getValue();
                String[] split = calculation.split(" ");
                if (apesWithNumbers.containsKey(split[0]) && apesWithNumbers.containsKey(split[2])) {

                    long number1 = apesWithNumbers.get(split[0]);
                    long number2 = apesWithNumbers.get(split[2]);
                    long result = 0;
                    if (split[1].equals("+")) {
                        result = number1 + number2;
                    } else if (split[1].equals("*")) {
                        result = number1 * number2;
                    }else if (split[1].equals("-")) {
                        result = number1 - number2;
                    }else if (split[1].equals("/")) {
                        result = number1 / number2;
                    }
                    System.out.println(ape + " = " + number1 + " " +split[1]  +" " + number2 + " = " + result);

                    if(ape.equals("root")) {
                        return String.valueOf(result);
                    }
                    apesWithNumbers.put(ape, result);


                } else {
                    newApesWithCalculations.put(ape, calculation);
                }
            }
            apesWithCalculations = newApesWithCalculations;
        }

        return Long.toString(sum);
    }
    public String getSolutionPart2(List<String> input) {
        int sum = 0;

        Map<String, Long> apesWithNumbers = new HashMap<>();
        Map<String, String> apesWithCalculations = new HashMap<>();
        String[] root = new String[3];
        Pattern pattern = Pattern.compile("-?\\d+(\\.\\d+)?");



        for(String line : input) {
            String[] split = line.split(": ");
            String ape = split[0];
            if(ape.equals("root")) {
                root = split[1].split(" ");
                System.out.println(root[0] + " = " + root[2]);
                continue;
            } else if (ape.equals("humn")) {
                continue;
                //apesWithNumbers.put(ape, 0L);
            }
            String number = split[1];
            if(pattern.matcher(number).matches()) {
                apesWithNumbers.put(ape, Long.parseLong(number));
            } else {
                apesWithCalculations.put(ape, number);
            }
        }

        int solved = 0;
        do {
            solved = 0;
            Map<String, String> newApesWithCalculations = new HashMap<>();
            for(Map.Entry<String, String> entry : apesWithCalculations.entrySet()) {
                String ape = entry.getKey();
                String calculation = entry.getValue();
                String[] split = calculation.split(" ");
                if (apesWithNumbers.containsKey(split[0]) && apesWithNumbers.containsKey(split[2])) {

                    long number1 = apesWithNumbers.get(split[0]);
                    long number2 = apesWithNumbers.get(split[2]);
                    long result = 0;
                    if (split[1].equals("+")) {
                        result = number1 + number2;
                    } else if (split[1].equals("*")) {
                        result = number1 * number2;
                    }else if (split[1].equals("-")) {
                        result = number1 - number2;
                    }else if (split[1].equals("/")) {
                        result = number1 / number2;
                    }
                    System.out.println(ape + " = " + number1 + " " +split[1]  +" " + number2 + " = " + result);

                    if(ape.equals("root")) {
                        return String.valueOf(result);
                    }
                    apesWithNumbers.put(ape, result);

                    solved++;
                } else {
                    newApesWithCalculations.put(ape, calculation);
                }
            }
            apesWithCalculations = newApesWithCalculations;

        } while (solved > 0);

        System.out.println(apesWithNumbers);
        System.out.println(apesWithCalculations);

        String calculation1 = getEquation(root[0], apesWithNumbers, apesWithCalculations);
        String calculation2 = getEquation(root[2], apesWithNumbers, apesWithCalculations);

        String equation = "";
        Long result = 0L;
        if(pattern.matcher(calculation1).matches()) {
            result = Long.parseLong(calculation1);
            equation = calculation2;
        } else {
            result = Long.parseLong(calculation2);
            equation = calculation1;
        }
        System.out.println(equation + " = " + result);
        boolean found = false;
        do {


            Pattern p2 = Pattern.compile("\\(|\\)");
            Matcher matcher = p2.matcher(equation);
            int count = 0;
            while (matcher.find()) {
                count++;
            }
            if(count == 2) {
                equation = equation.replace("(", "").replace(")", "");
                String[] test  = equation.split(" ");
                Long n = 0L;
                String op= "";
                if(pattern.matcher(test[0]).matches()) {
                    n = Long.parseLong(test[0]);
                } else {

                    n = Long.parseLong(test[2]);
                }
                op = test[1];
                switch(op) {
                    case "+":
                        result -= n;
                        break;
                    case "-":
                        result += n;
                        break;
                    case "*":
                        result /= n;
                        break;
                    case "/":
                        result *= n;
                        break;
                }
                return Long.toString(result);
            }

            boolean isSingle = true;
            String regex = "^(\\()(\\d+).([\\+\\-\\/\\*])(.*)(\\))$";
            if(equation.substring(0,2).equals("((")) {
                isSingle = false;
                regex = "^(\\()(.*)([\\+\\-\\/\\*]).(\\d+)(\\))$";
            }

            Pattern p = Pattern.compile(regex, Pattern.MULTILINE);
            matcher = p.matcher(equation);
            String operator = "";
            Long number = 0L;

                while (matcher.find()) {

                    for (int i = 1; i <= matcher.groupCount(); i++) {
                        if ((isSingle && i == 4) || (!isSingle && i == 2)) {
                            equation = matcher.group(i).trim();
                        } else if ((isSingle && i == 3) || (!isSingle && i == 3)) {
                            operator = matcher.group(i);
                        } else if ((isSingle && i == 2) || (!isSingle && i == 4)) {
                            number = Long.parseLong(matcher.group(i));
                        }
                            //System.out.println("Group " + i + ": " + matcher.group(i));
                    }
                }

            switch(operator) {
                case "+":
                    result -= number;
                    break;
                case "-":
                    result += number;
                    break;
                case "*":
                    result /= number;
                    break;
                case "/":
                    result *= number;
                    break;
            }
            System.out.println(equation + " = " + result);

        } while(!found);

        return Long.toString(sum);
    }

    public String getEquation(String calculation, Map<String, Long> apesWithNumbers, Map<String, String> apesWithCalculations) {

        boolean found = false;
        System.out.println(calculation);
        do {
            found = false;
            String[] split = calculation
                    .replace("(", "")
                    .replace(")", "")
                    .replace(" +", "")
                    .replace(" /", "")
                    .replace(" *", "")
                    .replace(" -", "")
                    .split(" ");

            for(String s : split) {
                if(apesWithNumbers.containsKey(s)) {
                    calculation = calculation.replace(s, apesWithNumbers.get(s).toString());
                    found = true;
                } else if(apesWithCalculations.containsKey(s)) {
                    calculation = calculation.replace(s, "(" + apesWithCalculations.get(s) + ")");
                    found = true;
                }
            }
        } while(found);
        return calculation;
    }

    public static void main(String[] args) throws IOException {
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App().getSolutionPart2(input));
        else
            System.out.println(new App().getSolutionPart1(input));
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
