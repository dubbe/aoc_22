/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.awt.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;


public class App {

    public App() {
    }


    public Integer getSolutionPart1(List<String> input) {
        Map<Point, Integer> grid = new HashMap<>();
        List<Integer> highestTreeOnCol = new ArrayList<>();
        int y = 0;
        for (String line : input) {
            char[] l = line.toCharArray();
            int x = 0;
            int highestTreeOnRow = 0;
            if (y == 0) {
                for (int i = 0; i < l.length; i++) {
                    highestTreeOnCol.add(i, 0);
                }
            }
            for (char c : l) {
                int tree = Integer.parseInt(String.valueOf(c));
                if (x == 0 || tree > highestTreeOnRow) {
                    grid.put(new Point(x, y), tree);
                    highestTreeOnRow = tree;
                }
                if (y == 0 || tree > highestTreeOnCol.get(x)) {
                    grid.put(new Point(x, y), tree);
                    highestTreeOnCol.set(x, tree);
                }
                x++;
            }

            highestTreeOnRow = 0;
            for (x = l.length - 1; x >= 0; x--) {
                int tree = Integer.parseInt(String.valueOf(l[x]));
                if (x == l.length - 1 || tree > highestTreeOnRow) {
                    grid.put(new Point(x, y), tree);
                    highestTreeOnRow = tree;
                }
            }
            y++;
        }

        Collections.reverse(input);
        y = input.size();
        for (String line : input) {
            char[] l = line.toCharArray();
            int x = 0;
            if (y == input.size()) {
                for (int i = 0; i < l.length; i++) {
                    highestTreeOnCol.add(i, 0);
                }
            }
            for (char c : l) {
                int tree = Integer.parseInt(String.valueOf(c));
                if (y == input.size() || tree > highestTreeOnCol.get(x)) {
                    grid.put(new Point(x, y - 1), tree);
                    highestTreeOnCol.set(x, tree);
                }
                x++;
            }
            y--;
        }

        return grid.size();
    }


    public Integer getSolutionPart2(List<String> input) {
        Map<Point, Integer> grid = new HashMap<>();
        for (int y = 0; y < input.size(); y++) {
            char[] l = input.get(y).toCharArray();
            for (int x = 0; x < input.get(0).length(); x++) {
                int tree = Integer.parseInt(String.valueOf(l[x]));
                grid.put(new Point(x, y), tree);
            }
        }
        int highestScore = 0;
        for (int y = 0; y < input.size(); y++) {
            for (int x = 0; x < input.get(0).length(); x++) {
                int seenTreesUp = 0;
                int seenTreesLeft = 0;
                int seenTreesRight = 0;
                int seenTreesDown = 0;

                int tree = grid.get(new Point(x, y));
                // up
                for (int i = y - 1; i >= 0; i--) {
                    int foundTree = grid.get(new Point(x, i));
                    seenTreesUp++;
                    if (foundTree >= tree) {
                        break;
                    }
                }

                // left
                for (int i = x + 1; i < input.get(0).length(); i++) {
                    int foundTree = grid.get(new Point(i, y));
                    seenTreesRight++;
                    if (foundTree >= tree) {
                        break;
                    }
                }

                // down
                for (int i = y + 1; i < input.size(); i++) {
                    int foundTree = grid.get(new Point(x, i));
                    seenTreesDown++;
                    if (foundTree >= tree) {
                        break;
                    }
                }

                // right
                for (int i = x - 1; i >= 0; i--) {
                    int foundTree = grid.get(new Point(i, y));
                    seenTreesLeft++;
                    if (foundTree >= tree) {
                        break;
                    }
                }
                int seenTrees = seenTreesUp * seenTreesLeft * seenTreesRight * seenTreesDown;
                if (seenTrees > highestScore) {
                    highestScore = seenTrees;
                }
            }

        }
        return highestScore;
    }

    public static void main(String[] args) throws IOException {
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App().getSolutionPart2(input));
        else
            System.out.println(new App().getSolutionPart1(input));
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
