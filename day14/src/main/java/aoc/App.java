/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package aoc;

import java.awt.*;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.*;
import java.util.List;
import java.util.stream.Collectors;


public class App {


    public App() {
    }


    public Integer getSolutionPart1(List<String> input) {

        int minX = Integer.MAX_VALUE;
        int minY = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE;
        int maxY = Integer.MIN_VALUE;
        Set<Point> rocks = new HashSet<>();
        Set<Point> sands = new HashSet<>();
        for(String line : input) {
            List<Integer> xList =  new ArrayList<>();
            List<Integer> yList = new ArrayList<>();
            for(String coordinate : line.split(" -> ")) {
                String[] coordinates = coordinate.split(",");
                xList.add(Integer.parseInt(coordinates[0]));
                yList.add(Integer.parseInt(coordinates[1]));
            }


            for(int i = 0; i < xList.size()-1; i++) {
                int xStart = xList.get(i);
                int xEnd = xList.get(i+1);
                if(xEnd < xStart) {
                    int temp = xStart;
                    xStart = xEnd;
                    xEnd = temp;
                }
                for(int j = xStart; j <= xEnd; j++) {
                    int yStart = yList.get(i);
                    int yEnd = yList.get(i+1);
                    if(yEnd < yStart) {
                        int temp = yStart;
                        yStart = yEnd;
                        yEnd = temp;
                    }
                    for(int k = yStart; k <= yEnd; k++) {
                        if(j > maxX) {
                            maxX = j;
                        } else if (j < minX) {
                            minX = j;
                        }

                        if(k > maxY) {
                            maxY = k;
                        } else if (k < minY) {
                            minY = k;
                        }

                        rocks.add(new Point(j, k));
                    }
                }
            }



        }
        System.out.println("minX: " + minX + " maxX: " + maxX + " minY: " + minY + " maxY: " + maxY);

        print(minX, maxX, maxY, rocks, new Point(500, 0), sands);

        while(true) {
            Point sand = new Point(500, 0);
            boolean canMove = true;
            while(canMove) {
                if(sand.y <= maxY) {
                    if(!rocks.contains(new Point(sand.x, sand.y+1)) && !sands.contains(new Point(sand.x, sand.y+1))) {
                        sand.y++;
                    } else if(!rocks.contains(new Point(sand.x-1, sand.y+1)) && !sands.contains(new Point(sand.x-1, sand.y+1))) {
                        sand.y++;
                        sand.x--;
                    } else if(!rocks.contains(new Point(sand.x+1, sand.y+1)) && !sands.contains(new Point(sand.x+1, sand.y+1))) {
                        sand.y++;
                        sand.x++;
                    }else {
                        sands.add(sand);
                        canMove = false;
                    }
                } else {
                    return sands.size();
                }
                //print(minX, maxX, maxY, rocks, sand, sands);
            }
        }
    }

    private static void print(int minX, int maxX, int maxY, Set<Point> rocks, Point sand, Set<Point> sands) {
        System.out.println("sand: " + sand);
        for(int y = 0; y <= maxY+1; y++) {
            System.out.print(y + " ");
            for(int x = minX; x <= maxX+1; x++) {
                if(rocks.contains(new Point(x, y))) {
                    System.out.print("#");
                } else if(sands.contains(new Point(x, y))) {
                    System.out.print("o");
                } else if(sand.getX() == x && sand.getY() == y) {
                    System.out.print("+");
                } else {
                    System.out.print(".");
                }
            }
            System.out.println();
        }
    }


    public Integer getSolutionPart2(List<String> input) {
        int minX = Integer.MAX_VALUE;
        int minY = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE;
        int maxY = Integer.MIN_VALUE;
        Set<Point> rocks = new HashSet<>();
        Set<Point> sands = new HashSet<>();
        for(String line : input) {
            List<Integer> xList =  new ArrayList<>();
            List<Integer> yList = new ArrayList<>();
            for(String coordinate : line.split(" -> ")) {
                String[] coordinates = coordinate.split(",");
                xList.add(Integer.parseInt(coordinates[0]));
                yList.add(Integer.parseInt(coordinates[1]));
            }


            for(int i = 0; i < xList.size()-1; i++) {
                int xStart = xList.get(i);
                int xEnd = xList.get(i+1);
                if(xEnd < xStart) {
                    int temp = xStart;
                    xStart = xEnd;
                    xEnd = temp;
                }
                for(int j = xStart; j <= xEnd; j++) {
                    int yStart = yList.get(i);
                    int yEnd = yList.get(i+1);
                    if(yEnd < yStart) {
                        int temp = yStart;
                        yStart = yEnd;
                        yEnd = temp;
                    }
                    for(int k = yStart; k <= yEnd; k++) {
                        if(j > maxX) {
                            maxX = j;
                        } else if (j < minX) {
                            minX = j;
                        }

                        if(k > maxY) {
                            maxY = k;
                        } else if (k < minY) {
                            minY = k;
                        }

                        rocks.add(new Point(j, k));
                    }
                }
            }



        }
        maxY += 0;
        minX += -10;
        maxX += 10;
        System.out.println("minX: " + minX + " maxX: " + maxX + " minY: " + minY + " maxY: " + maxY);

        print(minX, maxX, maxY, rocks, new Point(500, 0), sands);

        while(true) {
            Point sand = new Point(500, 0);
            if(sands.contains(sand)) {
                System.out.println("wohp?");
                return sands.size();
            }
            boolean canMove = true;
            while(canMove) {

                if(sand.y <= maxY) {
                    if(!rocks.contains(new Point(sand.x, sand.y+1)) && !sands.contains(new Point(sand.x, sand.y+1))) {
                        sand.y++;
                    } else if(!rocks.contains(new Point(sand.x-1, sand.y+1)) && !sands.contains(new Point(sand.x-1, sand.y+1))) {
                        sand.y++;
                        sand.x--;
                    } else if(!rocks.contains(new Point(sand.x+1, sand.y+1)) && !sands.contains(new Point(sand.x+1, sand.y+1))) {
                        sand.y++;
                        sand.x++;
                    } else {
                        sands.add(sand);
                        canMove = false;
                    }
                } else {
                    sands.add(sand);
                    canMove = false;
                }
                //print(minX, maxX, maxY, rocks, sand, sands);
            }
        }
    }

    public static void main(String[] args) throws IOException {
        List<String> input = parseInput("input.txt");
        String part = System.getenv("part") == null ? "part1" : System.getenv("part");
        if (part.equals("part2"))
            System.out.println(new App().getSolutionPart2(input));
        else
            System.out.println(new App().getSolutionPart1(input));
    }

    private static List<String> parseInput(String filename) throws IOException {
        return Files.lines(Path.of(filename))
                .collect(Collectors.toList());
    }
}
